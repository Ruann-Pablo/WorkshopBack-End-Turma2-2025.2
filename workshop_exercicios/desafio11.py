"""Exerc√≠cio 5: Tratando M√∫ltiplos Erros ao Mesmo Tempo

O c√≥digo abaixo pode gerar v√°rios tipos de erro dependendo da entrada do usu√°rio.

```
def dividir(a, b):
    return a / b

num1 = input("Digite o primeiro n√∫mero: ")
num2 = input("Digite o segundo n√∫mero: ")

resultado = dividir(int(num1), int(num2))
print(f"Resultado: {resultado}")
```

Tarefa:
1Ô∏è‚É£ Identifique quais erros esse c√≥digo pode gerar.
2Ô∏è‚É£ Implemente `try-except` para capturar diferentes erros e mostrar mensagens adequadas.
3Ô∏è‚É£ Pesquise poss√≠veis abordagens para tornar o c√≥digo mais robusto.

üí°Dica:
- O usu√°rio pode inserir um texto em vez de um n√∫mero (`ValueError`).
- O segundo n√∫mero pode ser zero, gerando um `ZeroDivisionError`."""

def dividir(num1:str, num2:str) -> float:
    try:
        num_1 = float(num1)
        num_2 = float(num2)
        return num_1 / num_2
    except ValueError:
        print("Erro: voc√™ deve digitar n√∫meros v√°lidos (ex.: 10, 3.5).")
    except ZeroDivisionError:
        print("Erro: divis√£o por zero n√£o √© permitida.")
    except TypeError:
        print("Erro: tipos inv√°lidos recebidos.")


num1 = input("Digite o primeiro n√∫mero: ")
num2 = input("Digite o segundo n√∫mero: ")

resultado = dividir(num1, num2)
print(f"Resultado: {resultado}")